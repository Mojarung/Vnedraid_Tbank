#!/usr/bin/env python3
"""
Telegram News Parser - –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import json
import re
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import MessageMediaDocument, MessageMediaPhoto
    from telethon.errors import SessionPasswordNeededError, ChannelPrivateError, FloodWaitError
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ telethon: pip install telethon")
    exit(1)

try:
    import aiofiles
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ aiofiles: pip install aiofiles")
    exit(1)

from pydantic import BaseModel, Field

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


@dataclass
class TelegramNews:
    """–ú–æ–¥–µ–ª—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Telegram"""
    channel_username: str
    channel_title: str
    message_id: int
    text: str
    date: datetime
    views: Optional[int] = None
    forwards: Optional[int] = None
    media_urls: List[str] = None
    media_type: Optional[str] = None
    author: Optional[str] = None
    tags: List[str] = None
    category: Optional[str] = None
    
    def __post_init__(self):
        if self.media_urls is None:
            self.media_urls = []
        if self.tags is None:
            self.tags = []


class TelegramParserConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    api_id: int = Field(..., description="Telegram API ID")
    api_hash: str = Field(..., description="Telegram API Hash")
    phone_number: str = Field(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    session_name: str = Field(default="telegram_parser", description="–ò–º—è —Å–µ—Å—Å–∏–∏")
    
    # –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    channels: List[str] = Field(
        default=[
            "@breakingmash",
            "@RIANovosti", 
            "@tass_agency",
            "@rbc_news",
            "@vedomosti"
        ],
        description="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    
    # –§–∏–ª—å—Ç—Ä—ã
    keywords: List[str] = Field(
        default=["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—Ä—ã–Ω–æ–∫", "–±–∏—Ä–∂–∞", "–≤–∞–ª—é—Ç–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–±–∞–Ω–∫"],
        description="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
    )
    exclude_keywords: List[str] = Field(
        default=["—Ä–µ–∫–ª–∞–º–∞", "—Å–ø–∞–º"],
        description="–ò—Å–∫–ª—é—á–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    max_messages: int = Field(default=100, description="–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑")
    hours_back: int = Field(default=24, description="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å")
    download_media: bool = Field(default=False, description="–°–∫–∞—á–∏–≤–∞—Ç—å –º–µ–¥–∏–∞")
    media_dir: str = Field(default="media", description="–ü–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞")


class TelegramNewsParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ Telegram –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, config: TelegramParserConfig):
        self.config = config
        self.client = None
        self.media_dir = Path(config.media_dir)
        self.media_dir.mkdir(exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_processed": 0,
            "filtered_out": 0,
            "saved": 0,
            "errors": 0
        }
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.client = TelegramClient(
                self.config.session_name,
                self.config.api_id,
                self.config.api_hash
            )
            
            await self.client.start(phone=self.config.phone_number)
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.client:
            await self.client.disconnect()
    
    def _filter_message(self, text: str) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not text:
            return False
            
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        for exclude_word in self.config.exclude_keywords:
            if exclude_word.lower() in text_lower:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        if not self.config.keywords:
            return True
            
        for keyword in self.config.keywords:
            if keyword.lower() in text_lower:
                return True
                
        return False
    
    def _extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤"""
        return re.findall(r'#(\w+)', text)
    
    def _categorize_news(self, text: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ä—ã–Ω–æ–∫", "–±–∏—Ä–∂–∞", "–≤–∞–ª—é—Ç–∞"]):
            return "—ç–∫–æ–Ω–æ–º–∏–∫–∞"
        elif any(word in text_lower for word in ["–ø–æ–ª–∏—Ç–∏–∫–∞", "–≤—ã–±–æ—Ä—ã", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]):
            return "–ø–æ–ª–∏—Ç–∏–∫–∞"
        elif any(word in text_lower for word in ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "it", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"]):
            return "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        elif any(word in text_lower for word in ["—Å–ø–æ—Ä—Ç", "—Ñ—É—Ç–±–æ–ª", "—Ö–æ–∫–∫–µ–π"]):
            return "—Å–ø–æ—Ä—Ç"
        else:
            return "–æ–±—â–∏–µ"
    
    async def _download_media(self, message, media_urls: List[str]) -> List[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
        if not self.config.download_media or not message.media:
            return media_urls
            
        try:
            media_path = self.media_dir / f"{message.id}"
            media_path.mkdir(exist_ok=True)
            
            if isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument)):
                file_path = await self.client.download_media(
                    message.media, 
                    file=str(media_path)
                )
                if file_path:
                    media_urls.append(str(file_path))
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ {message.id}: {e}")
            
        return media_urls
    
    async def _process_message(self, message, channel_info: Dict) -> Optional[TelegramNews]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.text or ""
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if not self._filter_message(text):
                self.stats["filtered_out"] += 1
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            media_type = None
            media_urls = []
            
            if message.media:
                if isinstance(message.media, MessageMediaPhoto):
                    media_type = "photo"
                elif isinstance(message.media, MessageMediaDocument):
                    media_type = "document"
                
                media_urls = await self._download_media(message, media_urls)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
            news = TelegramNews(
                channel_username=channel_info["username"],
                channel_title=channel_info["title"],
                message_id=message.id,
                text=text,
                date=message.date.replace(tzinfo=timezone.utc),
                views=getattr(message, 'views', None),
                forwards=getattr(message, 'forwards', None),
                media_urls=media_urls,
                media_type=media_type,
                author=getattr(message, 'post_author', None),
                tags=self._extract_tags(text),
                category=self._categorize_news(text)
            )
            
            self.stats["total_processed"] += 1
            return news
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            self.stats["errors"] += 1
            return None
    
    async def parse_channel(self, channel_username: str) -> List[TelegramNews]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        news_list = []
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channel = await self.client.get_entity(channel_username)
            channel_info = {
                "username": channel_username,
                "title": getattr(channel, 'title', channel_username),
                "id": channel.id
            }
            
            logger.info(f"üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel_info['title']} ({channel_username})")
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
            date_from = datetime.now(timezone.utc) - timedelta(hours=self.config.hours_back)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.client.iter_messages(
                channel,
                limit=self.config.max_messages,
                offset_date=date_from
            ):
                if message.date < date_from:
                    break
                    
                news = await self._process_message(message, channel_info)
                if news:
                    news_list.append(news)
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username}: –ø–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
        except ChannelPrivateError:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except FloodWaitError as e:
            logger.warning(f"‚è∞ Rate limit –¥–ª—è {channel_username}, –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
            self.stats["errors"] += 1
        
        return news_list
    
    async def save_to_json(self, news_list: List[TelegramNews], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_news_{timestamp}.json"
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä–∏
            news_dicts = []
            for news in news_list:
                news_dict = asdict(news)
                news_dict['date'] = news.date.isoformat()
                news_dicts.append(news_dict)
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
            async with aiofiles.open(filename, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(news_dicts, ensure_ascii=False, indent=2))
            
            logger.info(f"üíæ –ù–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            self.stats["saved"] += len(news_list)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON: {e}")
    
    async def parse_all_channels(self) -> List[TelegramNews]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        all_news = []
        
        for channel in self.config.channels:
            try:
                channel_news = await self.parse_channel(channel)
                all_news.extend(channel_news)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        all_news.sort(key=lambda x: x.date, reverse=True)
        
        return all_news
    
    def print_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê ===")
        logger.info(f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_processed']}")
        logger.info(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['filtered_out']}")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['saved']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def parse_telegram_news(config: TelegramParserConfig) -> List[TelegramNews]:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    parser = TelegramNewsParser(config)
    
    try:
        await parser.initialize()
        news_list = await parser.parse_all_channels()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await parser.save_to_json(news_list)
        
        parser.print_stats()
        return news_list
        
    finally:
        await parser.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!)
    config = TelegramParserConfig(
        api_id=12345,  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à API ID
        api_hash="your_api_hash",  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à API Hash
        phone_number="+7XXXXXXXXXX",  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä
        channels=[
            "@breakingmash",
            "@RIANovosti",
            "@tass_agency"
        ],
        keywords=["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—Ä—ã–Ω–æ–∫", "–±–∏—Ä–∂–∞"],
        max_messages=50,
        hours_back=12
    )
    
    try:
        news_list = await parse_telegram_news(config)
        print(f"\nüéâ –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
        for i, news in enumerate(news_list[:3], 1):
            print(f"\nüì∞ –ù–æ–≤–æ—Å—Ç—å {i}:")
            print(f"   üì∫ –ö–∞–Ω–∞–ª: {news.channel_title}")
            print(f"   üìÖ –î–∞—Ç–∞: {news.date.strftime('%Y-%m-%d %H:%M')}")
            print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news.category}")
            print(f"   üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {news.views or 'N/A'}")
            print(f"   üìù –¢–µ–∫—Å—Ç: {news.text[:200]}{'...' if len(news.text) > 200 else ''}")
            if news.tags:
                print(f"   üè∑Ô∏è –¢–µ–≥–∏: {', '.join(news.tags)}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram News Parser...")
    asyncio.run(main()) 